An 'Interface' is a contract. It says,
"Here's a thing...that will have a thing you can work with"

FOr example, click 'Add', 'New Item', 'Interface'

Naming Convention is a capital I, followed by Pascalcase Variable

EVERYTHING in the interface is public....so no variables need to be valued as such


There's no code in here...just things you should have.

A 'Signature is just the important bits of the code

If you want to add the neccessary propertys to classes that are going to be under the interface, you can highlight
it, then press CTRL + . ,(14:13).

You can remove the exception given and just set the property like a normal class would...
that's just a microsoft safety feature

We also gave the DIgitalProductModel a set as well...we can do that, becuase it fufills the get
from the promise of the interface

Again, you only want to design interfaces with properties a class it would work with SHOULD have.
Just the minimal amount of properties

If you want classes to inheretit from other classes, the interface must be listed AFTER the 
definition of that class

If you want to extract an interface on a class, hover on the class, press CTRL + .

Implement is different from inherent.
You IMPLEMENT  an interface, because you aren't brinign down code

You can apply two interfaces to two classes
It's saying you will have ALL the stuff from one class AND another 

You can pour over the interfaces into each other as well, (see IDigitlaProductModel),
so they will require the promises of BOTH

To use the 'is' operator, you need to use VS 2017; it's only on a certain version of .NET