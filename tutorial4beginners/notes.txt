Here are the notes for all of this lesson: https://www.youtube.com/watch?v=gfkTfcpWqAY
I also used this, it's more extensive: https://www.youtube.com/watch?v=FPeGkedZykA 

C# vs. .NET
C# is a programming language and .NET is a framework for building applications for windows...it's not
limited to C#

.NET is comprised of two things:
1. CLR(Common Language Runtime) - Compiles application code to machine code for running. Uses 'JIT', or
'Just in Time' code

2. Class Library

History of C#:
Microsoft wanted a language that could be translated to machine code on Linux AND windows...
so they borrowed ideas from Java. CLR is an application that is used to translate the machine language

------------------------------------------
.Net applications architrecture:
Applications are made up of classes

Classes - Contain data and Methods/functions
Namespace - Container for related classes

Assembly - A container for related namespaces. It can be an executable or 'DLL',
or 'Dynamically Listed Language'.

Application - A build up of assemblys

------------------------------------------

'Your First Program' Section
NOTE: Not quite sure how to work on this in VS code...so maybe I should start with Visual Studio :(
Look at video section for how to set a project up in Visual Studio

It's a lot like Java...if you want to use different namespaces, you'll need 
to import them at the top with the following: using NAME-OF-NAMESPACE.

Here are some common imports:
using System; //Uses a bunch of stuff within .NET framework
using System.Collecitons.Generic; //Used to work with lists, collections 
using System.Linq; //Used to work with data
using System.Text //Used to work with text/coding
using System.Threading.Tasks; //Used for multi-threading in an application

Within an applicaiton, you should have a program class...inside that is a 'Main' function, 
which is an entrypoint to the application. Example:

namespace HelloWorld
{
    class Program
    {
        static void Main(string[] args)
        {
            
        }
    }
}

TBH, this might look a little different, based on what version of .NET you have...

To run the application:
CTRL + 5 
You can click start on the green arrow on the top.
You can also click 'Debug', then 'Start Debug'

'bin' folder contains the binary file that the computer runs

'Instantiated Classes' are classes that are filled in with values by you at the conception of 
the class being called,(like youre own constructor class 

Static means you don't need to include a method of that class 

Encapsulation means that there are certain methods that should remain within a class...
another class shouldn't know another class works, just what is publicly exposed.
If it needs to be private, keep it private

There's also 'inhereted' and 'protected' as accessibility modifiers...not really needed until 
you are advanced.

-----------------------------------------------

Working with .NET framework/library
.NET assemblies are being formed every time we run the application
You can see these in the 'bin' directories.
This will have 'Debug' and 'Release' versions
You can also build it in VS, under 'Build', 'Build Soloution'

In that case, the .NET framework needs to be installed on any computer where you want the application to 
run. Windows already has it, it's globally accessible...so you gotta do some weird stuff with Linux

Think of 'NameSpaces' like 'Last Names' for refferences of classes. There can be multiple classes with 
the same name, but they are uniquely identified with Namespaces.
For instance, we COULD use System.Console.WriteLine...but we don't need to because we 
typed in 'using Sytem;', which uses the System namespace

To look for useful libraries from Microsoft, use Google like this:
site:microsoft.com WHATEVER_YOU_WANNA_SEARCH_FOR

So you just gotta make sure those assemblies are imported for what you want to do.

There's also open source communities. NuGet is owned by Microsoft, but 
it should be a way to get the packages you need.
To access, go to 'Tools', 'NuGet Package Manager', 'Manage NuGet pakages for soloution'

We can also create class libraries by ourselves...
(For this next part, we created the new project, 'Libray Example')

You can also check the 'MyClient' fodler for a continuation of this soloution

To add your assembly to another project, (a DLL file):
5:52
In the soloution explorer, right click 'dependenceies', 'Add Project Refference', then 
browse to find and try your DLL in another project.

It should be in the 'bin' directory, under release or debug
That DLL will be copied into the bin of the 'CLIENT' project.

There's an even MORE streamlined way to do this....


------------------------------------------------------
Working with .NET framework,(more streamlined)
We made a new 'blank project'
5:55 continued...

You can't start a library...so you need to select the project with the 'Main'
function, right clickt the project in the soloution explorer, then 
set it as the startup project.

Having an issue doing this...created a new folder to test this...
Might have been because I didn't have the 'Scrape Client' as the 
Console Application...I just had two libraries

You can also make changes to those refferenced libraries and they 
should still function within your soloution after building.


------------------------------------------------------
Working with Collections

Collections are like cooler Arrays

A lot of the notes are in the project 

Theres a few more expressions he did in the video, I didn't feel the need to
add all of them.

the 'var' keyword is different in C# than something like Javascript.
If you want to work with linqs, you must define the query types as var...it just works that way 

